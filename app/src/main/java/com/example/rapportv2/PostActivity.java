package com.example.rapportv2;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import android.app.ProgressDialog;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import android.text.TextUtils;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.ImageButton;import android.widget.Toast;import com.google.android.gms.tasks.Continuation;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.android.gms.tasks.Task;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.google.firebase.firestore.CollectionReference;import com.google.firebase.firestore.DocumentReference;import com.google.firebase.firestore.FirebaseFirestore;import com.google.firebase.firestore.QuerySnapshot;import com.google.firebase.storage.FirebaseStorage;import com.google.firebase.storage.StorageReference;import com.google.firebase.storage.UploadTask;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.HashMap;import java.util.Random;import java.util.UUID;public class PostActivity extends AppCompatActivity {    private ImageButton addPhotoBtn;    private EditText add_post_description;    private Button add_post_button;    private ProgressDialog loadingBar;    private static final int Gallery_Pick = 1;    private Uri ImageUri;    private String description;    private StorageReference storage;    private DatabaseReference UsersRef;    private FirebaseAuth mAuth;    private FirebaseFirestore db = FirebaseFirestore.getInstance();    private CollectionReference PostsRef;    private String saveCurrentDate, saveCurrentTime, postRandomName, username, uid,downloadUrl = null;    private long countPosts = 0;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_post);        PostsRef = db.collection("Posts");        mAuth = FirebaseAuth.getInstance();        uid = mAuth.getCurrentUser().getUid();        storage = FirebaseStorage.getInstance().getReference();        UsersRef = FirebaseDatabase.getInstance().getReference().child("Users");        addPhotoBtn = (ImageButton) findViewById(R.id.add_photo_btn);        add_post_button = (Button) findViewById(R.id.add_post_btn);        add_post_description = (EditText) findViewById(R.id.add_post_description);        loadingBar = new ProgressDialog(this);    }    public void openGallery(View v) {        Intent galleryIntent = new Intent();        galleryIntent.setAction(Intent.ACTION_GET_CONTENT);        galleryIntent.setType("image/*");        startActivityForResult(galleryIntent, Gallery_Pick);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == Gallery_Pick && resultCode == RESULT_OK && data != null) {            ImageUri = data.getData();            addPhotoBtn.setImageURI(ImageUri);        }    }    public void validatePostInfo(View v) {        description = add_post_description.getText().toString();      //  if (ImageUri == null) {       //     Toast.makeText(this, "Please select post image...", Toast.LENGTH_SHORT).show();        if (TextUtils.isEmpty(description)) {            Toast.makeText(this, "No description to post...", Toast.LENGTH_SHORT).show();        } else {            loadingBar.setTitle("Add New Post");            loadingBar.setMessage("Please wait, while we are updating your new post...");            loadingBar.show();            loadingBar.setCanceledOnTouchOutside(true);            storingImageToFirebaseStorage();        }    }    private void storingImageToFirebaseStorage() {        Calendar calFordDate = Calendar.getInstance();        SimpleDateFormat currentDate = new SimpleDateFormat("dd-MMMM-yyyy");        saveCurrentDate = currentDate.format(calFordDate.getTime());        SimpleDateFormat currentTime = new SimpleDateFormat("HH:mm");        saveCurrentTime = currentTime.format(calFordDate.getTime());        postRandomName = saveCurrentDate + saveCurrentTime;        if(ImageUri == null)        {            savingPostInformationToDatabase();        }        else        {            final StorageReference Imgref = storage.child("Post Images/"+ UUID.randomUUID());            Imgref.putFile(ImageUri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {            @Override            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {                Imgref.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {                    @Override                    public void onSuccess(Uri uri) {                        downloadUrl = uri.toString();                        savingPostInformationToDatabase();                    }                });            }        });    }    }    private void savingPostInformationToDatabase()    {       PostsRef.get() .addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {           @Override           public void onSuccess(QuerySnapshot queryDocumentSnapshots) {               if(queryDocumentSnapshots.isEmpty())               {                   countPosts = 0;                   Toast.makeText(PostActivity.this, String.valueOf(countPosts), Toast.LENGTH_SHORT).show();               }               else               {                   countPosts = queryDocumentSnapshots.size();               }               UsersRef.child(uid).addValueEventListener(new ValueEventListener() {                   @Override                   public void onDataChange(DataSnapshot dataSnapshot) {                       if (dataSnapshot.exists()) {                           username = dataSnapshot.child("A_name").getValue().toString();                           String  city = dataSnapshot.child("C_city").getValue().toString();                           String job   = dataSnapshot.child("B_job").getValue().toString();                           Posts post = new Posts(uid,username,description,saveCurrentDate,city,countPosts,job,downloadUrl,saveCurrentTime);                           PostsRef.add(post).addOnCompleteListener(new OnCompleteListener<DocumentReference>() {                               @Override                               public void onComplete(@NonNull Task<DocumentReference> task) {                                   SendUserToMainActivity();                                   Toast.makeText(PostActivity.this, "New Post is updated successfully.", Toast.LENGTH_SHORT).show();                                   loadingBar.dismiss();                               }                           }).addOnFailureListener(new OnFailureListener() {                               @Override                               public void onFailure(@NonNull Exception e) {                                   loadingBar.dismiss();                                   Toast.makeText(PostActivity.this, e.toString(), Toast.LENGTH_SHORT).show();                               }                           });                       }                   }                   @Override                   public void onCancelled(DatabaseError databaseError) {                   }               });           }       });    }    private void SendUserToMainActivity() {        Intent mainIntent = new Intent(PostActivity.this, MainActivity.class);        startActivity(mainIntent);    }}